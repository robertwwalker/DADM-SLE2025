{
  "hash": "1e080d5170d375c7b22961fe330a3166",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Notes on Joins\"\nauthor: \"Robert W. Walker\"\ndate: \"2025-09-16\"\nformat: html\n---\n\n\n\n## Two Data Sets\n\nOne on heroes.\n\n\n::: {.cell warnings='false'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nheroes <- \"\n    name, alignment, gender,         publisher\n Magneto,       bad,   male,            Marvel\n   Storm,      good, female,            Marvel\nMystique,       bad, female,            Marvel\n  Batman,      good,   male,                DC\n   Joker,       bad,   male,                DC\nCatwoman,       bad, female,                DC\n Hellboy,      good,   male, Dark Horse Comics\n\"\nheroes <- read_csv(heroes, skip = 1)\n\nbrands <- \"\n  publisher, yr_founded\n         DC,       1934\n     Marvel,       1939\n      Image,       1992\n\"\nbrands <- read_csv(brands, skip = 1)\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheroes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 4\n  name     alignment gender publisher        \n  <chr>    <chr>     <chr>  <chr>            \n1 Magneto  bad       male   Marvel           \n2 Storm    good      female Marvel           \n3 Mystique bad       female Marvel           \n4 Batman   good      male   DC               \n5 Joker    bad       male   DC               \n6 Catwoman bad       female DC               \n7 Hellboy  good      male   Dark Horse Comics\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrands\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  publisher yr_founded\n  <chr>          <dbl>\n1 DC              1934\n2 Marvel          1939\n3 Image           1992\n```\n\n\n:::\n:::\n\n\n\n## Joins\n\nAre the core idea behind SQL. R does all of these things though it does them in an R way.  We will figure that out.  The assignment?  To learn joins.  How?  Here are the commands; use them and see how they work.  It should be simple.  `inner_join(heroes,brands)` produces what?  Same for semi?  left?  right?  full?  **In the following explanations, when I use left and right data, I mean heroes as left and brands as right where the sides are with respect to the ,.**\n\n  \n1. `inner_join`  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninner_join(heroes,brands)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(publisher)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  name     alignment gender publisher yr_founded\n  <chr>    <chr>     <chr>  <chr>          <dbl>\n1 Magneto  bad       male   Marvel          1939\n2 Storm    good      female Marvel          1939\n3 Mystique bad       female Marvel          1939\n4 Batman   good      male   DC              1934\n5 Joker    bad       male   DC              1934\n6 Catwoman bad       female DC              1934\n```\n\n\n:::\n:::\n\n\nWe keep only those rows that exist in both the left and the right datasets and we join all columns.\n\n2. `semi_join`  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsemi_join(heroes,brands)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(publisher)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  name     alignment gender publisher\n  <chr>    <chr>     <chr>  <chr>    \n1 Magneto  bad       male   Marvel   \n2 Storm    good      female Marvel   \n3 Mystique bad       female Marvel   \n4 Batman   good      male   DC       \n5 Joker    bad       male   DC       \n6 Catwoman bad       female DC       \n```\n\n\n:::\n:::\n\n\nThe rows are the same as inner join but it does not keep columns from right data.\n\n3. `left_join`  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(heroes,brands)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(publisher)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 5\n  name     alignment gender publisher         yr_founded\n  <chr>    <chr>     <chr>  <chr>                  <dbl>\n1 Magneto  bad       male   Marvel                  1939\n2 Storm    good      female Marvel                  1939\n3 Mystique bad       female Marvel                  1939\n4 Batman   good      male   DC                      1934\n5 Joker    bad       male   DC                      1934\n6 Catwoman bad       female DC                      1934\n7 Hellboy  good      male   Dark Horse Comics         NA\n```\n\n\n:::\n:::\n\n\n*Keep all rows from the left*\n\n4. `right_join`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nright_join(heroes,brands)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(publisher)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 5\n  name     alignment gender publisher yr_founded\n  <chr>    <chr>     <chr>  <chr>          <dbl>\n1 Magneto  bad       male   Marvel          1939\n2 Storm    good      female Marvel          1939\n3 Mystique bad       female Marvel          1939\n4 Batman   good      male   DC              1934\n5 Joker    bad       male   DC              1934\n6 Catwoman bad       female DC              1934\n7 <NA>     <NA>      <NA>   Image           1992\n```\n\n\n:::\n:::\n\n\n*Keep all rows from the right*\n\n5. `full_join`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_join(heroes,brands)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(publisher)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 5\n  name     alignment gender publisher         yr_founded\n  <chr>    <chr>     <chr>  <chr>                  <dbl>\n1 Magneto  bad       male   Marvel                  1939\n2 Storm    good      female Marvel                  1939\n3 Mystique bad       female Marvel                  1939\n4 Batman   good      male   DC                      1934\n5 Joker    bad       male   DC                      1934\n6 Catwoman bad       female DC                      1934\n7 Hellboy  good      male   Dark Horse Comics         NA\n8 <NA>     <NA>      <NA>   Image                   1992\n```\n\n\n:::\n:::\n\n\n**Keep everything, all rows and all columns**\n\n6. `anti_join`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanti_join(heroes,brands)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(publisher)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  name    alignment gender publisher        \n  <chr>   <chr>     <chr>  <chr>            \n1 Hellboy good      male   Dark Horse Comics\n```\n\n\n:::\n:::\n\n\n**Only keep left rows that do not exist in the right data.**\n\nThe most important option here is `by`.  Here is an example using it explicitly.  We need to use `c()` to combine the two variable names where each name is specified as `character` name, with quotes surrounding it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanti_join(heroes,brands, by=c(\"publisher\" = \"publisher\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  name    alignment gender publisher        \n  <chr>   <chr>     <chr>  <chr>            \n1 Hellboy good      male   Dark Horse Comics\n```\n\n\n:::\n:::\n\n\nIf there were two [not applicable in this case], it would be `by = c(\"publisher\" = \"publisher\", \"acronym\" = \"acronym\")` and can apply to as many variables as one wishes.  The other argument of potential consequence is `na_matches`.  By default, `NA` values are matched [as are NotaNumber -- `NaN` values].  The option `na_matches = \"never\"` prevents this.  This is also completely inconsequential in this case but will be shown for completeness.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanti_join(heroes,brands, by=c(\"publisher\" = \"publisher\"), na_matches=\"never\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  name    alignment gender publisher        \n  <chr>   <chr>     <chr>  <chr>            \n1 Hellboy good      male   Dark Horse Comics\n```\n\n\n:::\n:::\n\n\nFor a graphical depiction of SQL joins, see [link](https://www.reddit.com/r/programming/comments/1xlqeu/sql_joins_explained_xpost_rsql/)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}